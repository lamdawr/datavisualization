x$setsolve(m)
m
}
## Ramkumar Paranjothy
## 5/24/2014
## The functions written below calculates inverse of a matrix and stores it
## in cache leveraging lexical scoping
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
makeCacheMatrix <- function(x = matrix(rbind(1:2,2:3))) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
"hello"
xyz <- 234
xyz
a
a=1
a
a=55;
echo a
a
a;
a; "hello "a;
a
hello
"hello"+a;
"hello"||a
rr=function(q)
q;
rr(5)
rr(91435)
edit
vi
c
clear
clsd
cls
a=10+r(550)
a=10+rr(550)
a
about_me = function(is_text)
{
is_text = "this is header, there is no use of the input";
}
about_me
about_me(x)
x
about_me("ram")
f=about_me("hello")
f
is_text
is_text;
}
about_me = function(is_text)
{
is_text = "this is header, there is no use of the input";
}
msg=about_me("")
msg
about_me = function(is_text)
{
is_text = "this is header, there is no use of the input";
is_text;
}
about_me(:)
about_me("")
about_me = function(is_text)
{
is_text = "this is header, there is no use of the input";
is_text;
}
is_text;
a=0;
about_me = function(is_text)
{
is_text = "this is header, there is no use of the input";
is_text;
a;
}
about_me
about("")
about_me("")
a<-makevector
a<-makecachematrix(1:2,2:3)
makeCacheMatrix <- function(x = matrix(rbind(1:2,2:3))) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function will find the inverse of the matrix defined above but will
## first check the cache for values
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a<-makecachematrix(1:2,2:3)
a<-makeCacheMatrix(1:2,2:3)
a<-makeCacheMatrix(1:2)
a$get()
a$getsolve()
cachesolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix() {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function will find the inverse of the matrix defined above but will
## first check the cache for values
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a<-makeCacheMatrix(cbind(1:2,2:3))
a$get
a$get()
a$getsolve()
cacheSolve(a)
install.packages("swirl")
swirl
load swirl
load(swirl)
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-y
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("my","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Lakshmi")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("x","y","z"),sep=" ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_nam<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
?sum
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3].x[5],x[7])
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5,byrow=FALSE)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patients","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y, pch = 20)
plot(x,y, pch = 19)
plot(x,y, pch = 2)
plot(x,y, pch = 3)
plot(x,y, pch = 4)
examples(points)
example(points)
plot(x,y, pch = 3)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y, pch = 3)
title("scatterplot")
text(-2,-2,"label")
legend("topleft",legend="Data")
legend("topleft",legend="Data",pch=20)
fit<-lm(y-x)
fit<-lm(y~x)
abline(fit)
?abline
abline(fit,lwd=3)
plot(x,y,xlab="weight",ylab="Height",main="scatterplot",pch=20)
?par
?transform()
getwd()
install.packages("RTools")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github","9911ad98e1408985879c")
myapp<-oauth_app("github","0c4bfd115439aef312b3cc8456b710710f957b76")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
library(httpuv)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
myapp<-oauth_app("github","9911ad98e1408985879c")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
myapp<-oauth_app("github","9911ad98e1408985879c","0c4bfd115439aef312b3cc8456b710710f957b76")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(jsonlite)
utils:::menuInstallPkgs()
content(req)
q()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
sum(prob)*x
sum(p)*x
sum(p*x)
round(pnorm(93,mean = 100,sd = 10)*100)
?pnorm()
pnorm(0.7,mean=80,sd=10)
pnorm(70,mean=80,sd=10)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75/sqrt(100))
?pbinom()
pbinom(3,prob=0.5,size=5,lower.tail=FALSE)
ppoise(10,lambda=3*5)
ppois(10,lambda = 5*3)
sessioninfo()
sessionInfo()
?make.names()
library("ggplot2")
?qplot()
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(result)
dev.off()
source('C:/lakshmi/coursera/exploratorydata/project2/plot3.R')
setwd("C:/lakshmi/coursera/exploratorydata/project2")
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(result)
dev.off()
View(result)
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(x = year ~ type, y = Emissions, data = result)
dev.off()
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(x = year, y = Emissions, data = result)
dev.off()
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(x = year, y = Emissions, data = result, fill = type)
dev.off()
# Load RDS
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#coerce type and year as factors
NEI$type <- as.factor(NEI$type)
NEI$year <- as.factor(NEI$year)
#grab only Baltimore City data
sub <- NEI[NEI$fips == "24510",]
#produce final data frame
result <- aggregate(Emissions ~ year + type, data = sub, FUN = sum)
png(filename="plot3b.png")
myplot<-qplot(x = year, y = Emissions, data = result, fill = type)
dev.off()
library(datasets)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
source('C:/lakshmi/coursera/exploratorydata/project2/plot3.R')
